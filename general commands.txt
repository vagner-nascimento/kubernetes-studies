>> KUBECTL
$ kubectl get pod # or 'get pods' #Get all pods in your Kubernetes cluster
$ kubectl get pods --show-labels # Get all pods in your
$ kubectl get service # Get all services on the Kubernetes cluster
$ kubectl get rs # Get information about the replicaset
$ kubectl create -f <file_name.yml> # Creates and starts a new pod/service on the cluster
$ kubectl describe pod <pod_name> # Brings details about some pod
$ kubectl describe service <service_name> # Brings details about some service
$ kubectl edit <resource_type>/<resource_name> # edit some resource. e.g. kubectl edit deployment/my-deployment

***IMPORTANT about Service Descriptions***:
    - "NodePort" could be used for access from others containers on the same pod.
    - "Endpoints" could be used to connect by another pods on the cluster.

# Gives access to a port inside the pod to listen in a local port. Used just for us, admins, to access our Pods from local machine
$ kubectl portfoward <pod_name> <local_port_toListen>:<pod_port>

# Expose pod as a Kubernetes Service to outside (create a service). Typenode is the type of service. If don't define a name, it takes the name of the pod
$ kubectl expose pod <pod_name> --type=NodePort --name <service-name>

# Starts a little pod to test somethings (like if a new service is available to the cluster) on your cluster
$ kubectl run -i --tty busybox --image=busybox --restart=Never -- sh

$ kubectl attach <pod_name> # Attach to a process that is already running inside an existing container.
$ kubectl exec <pod_name> -- <command> # Run a command in a container. IMPORTANT: created files and configurations made by this command will DISAPPEARS when the container stop
$ kubectl exec -it <pod_name> -- /bin/bash # Run a shell prompt into the Pod
$ kubectl logs <pod_name> # Show the logs of the Pod

>> MINIKUBE
$ minikube service <service-name> --url # Get the URL of exposed service by name
$ minikube service list # Get a list of all available services
$ minikube dashboard --url # Get the WEB UI of Kubernetes

>> GENERAL TIPS
- Use 'watch -n1 kubectl get pods' to watch the pods creation when create a resource like bellow:
    Ex.:
    * kubectl create -f health-checks/deployment-healthcheck.yml && watch -n1 kubectl get pods

$ watch -n1 kubectl get pods #Keep watching what happen with the Pods
$ kubectl exec <mysql_podname> -it -- mysql -u <user(default root)> -p #Access the mysql console. Password will be requested